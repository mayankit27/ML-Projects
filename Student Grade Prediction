{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11981001,"sourceType":"datasetVersion","datasetId":6685670}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/mayank123nayak/regression-student-grade-prediction?scriptVersionId=266651410\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"import necessary packages","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error,r2_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T06:38:06.563243Z","iopub.execute_input":"2025-10-08T06:38:06.563882Z","iopub.status.idle":"2025-10-08T06:38:06.56837Z","shell.execute_reply.started":"2025-10-08T06:38:06.563851Z","shell.execute_reply":"2025-10-08T06:38:06.567331Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"load data","metadata":{}},{"cell_type":"code","source":"data=pd.read_csv(\"/kaggle/input/students-grading-dataset/Students Performance Dataset.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T06:38:06.569822Z","iopub.execute_input":"2025-10-08T06:38:06.570066Z","iopub.status.idle":"2025-10-08T06:38:06.617771Z","shell.execute_reply.started":"2025-10-08T06:38:06.570048Z","shell.execute_reply":"2025-10-08T06:38:06.616985Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"explore the data","metadata":{}},{"cell_type":"code","source":"print(data.info())\nprint(data.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T06:38:06.618826Z","iopub.execute_input":"2025-10-08T06:38:06.619041Z","iopub.status.idle":"2025-10-08T06:38:06.640615Z","shell.execute_reply.started":"2025-10-08T06:38:06.619026Z","shell.execute_reply":"2025-10-08T06:38:06.639917Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"clean and preprocess the data","metadata":{}},{"cell_type":"code","source":"print(data.isnull().sum())\n#there is only one thing which is not available is famil_education_level but as we know it is not important to predict the grades, so we are not hoing to do anuthing","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T06:38:06.641943Z","iopub.execute_input":"2025-10-08T06:38:06.642173Z","iopub.status.idle":"2025-10-08T06:38:06.651268Z","shell.execute_reply.started":"2025-10-08T06:38:06.642155Z","shell.execute_reply":"2025-10-08T06:38:06.650395Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"select features and target data","metadata":{}},{"cell_type":"code","source":"features=[\"Midterm_Score\",\"Assignments_Avg\",\"Quizzes_Avg\",\"Participation_Score\",\"Projects_Score\",\"Total_Score\",\"Study_Hours_per_Week\"]\nx=data[features]\ny=data[\"Final_Score\"]\nprint(x)\nprint(\"\\n\\n\\n\")\nprint(y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T06:38:06.652232Z","iopub.execute_input":"2025-10-08T06:38:06.652674Z","iopub.status.idle":"2025-10-08T06:38:06.674316Z","shell.execute_reply.started":"2025-10-08T06:38:06.652648Z","shell.execute_reply":"2025-10-08T06:38:06.6734Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"split the data into training and testing datasets","metadata":{}},{"cell_type":"code","source":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T06:38:06.675163Z","iopub.execute_input":"2025-10-08T06:38:06.675736Z","iopub.status.idle":"2025-10-08T06:38:06.696606Z","shell.execute_reply.started":"2025-10-08T06:38:06.675715Z","shell.execute_reply":"2025-10-08T06:38:06.695785Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"choose a model and fit(or train) the model by giving training data","metadata":{}},{"cell_type":"code","source":"model=LinearRegression()\nmodel.fit(x_train,y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T06:38:06.698201Z","iopub.execute_input":"2025-10-08T06:38:06.698443Z","iopub.status.idle":"2025-10-08T06:38:06.718296Z","shell.execute_reply.started":"2025-10-08T06:38:06.698424Z","shell.execute_reply":"2025-10-08T06:38:06.717413Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"prediction by model and evaulation","metadata":{}},{"cell_type":"code","source":"y_pred=model.predict(x_test)\nprint(y_test)\nprint(\"\\n\\n\\n\")\nprint(y_pred)\nmse=mean_squared_error(y_test,y_pred)\nr2=r2_score(y_test,y_pred)\nprint(mse)\nprint(r2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T06:38:06.719054Z","iopub.execute_input":"2025-10-08T06:38:06.719323Z","iopub.status.idle":"2025-10-08T06:38:06.739826Z","shell.execute_reply.started":"2025-10-08T06:38:06.7193Z","shell.execute_reply":"2025-10-08T06:38:06.739024Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Student Grade Prediction using LinearRegression","metadata":{}},{"cell_type":"code","source":"#Step-1:- Import Necessary Libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n#Step-2:- Load and Explore the dataset\ndata=pd.read_csv(\"/kaggle/input/students-grading-dataset/Students Performance Dataset.csv\")\nprint(data.head())\nprint(\"\\n\\n\\n\\n\")\nprint(data.info())\nprint(\"\\n\\n\\n\\n\")\nprint(data.isnull().sum())\nprint(\"\\n\\n\\n\\n\")\n\n#Step-3:- Clean and Preprocess the data\ndata=data.drop(\"Parent_Education_Level\",axis=1)\n\n#Step-4:- Select which feature will be choosed as input feature and which one as output feature\nfeatures=[\"Midterm_Score\",\"Assignments_Avg\",\"Quizzes_Avg\",\"Participation_Score\",\"Projects_Score\",\"Total_Score\",\"Study_Hours_per_Week\"]\nx=data[features]\ny=data[\"Final_Score\"]\n\n#Step-5:- Split the data into training and testing sets\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\n#Step-6:- Create and Train the model\nmodel=LinearRegression()\nmodel.fit(x_train,y_train)\nprint(\"\\nModel:- \\n\",model)\n\n#Step-7:- Test the model\ny_pred=model.predict(x_test)\nprint(\"\\nActual Data:- \\n\",y_test)\nprint(\"\\nPredicted Data:- \\n\",y_pred[:10])\n\n#Step-8:- Calculate Mean Square Error and R2 Score\nmse=mean_squared_error(y_pred,y_test)\nprint(\"\\nMSE:- \\n\",mse)\nr2_score=r2_score(y_pred,y_test)\nprint(\"\\nR2 Score:- \\n\",r2_score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T18:51:12.838532Z","iopub.execute_input":"2025-10-08T18:51:12.839129Z","iopub.status.idle":"2025-10-08T18:51:15.709514Z","shell.execute_reply.started":"2025-10-08T18:51:12.839101Z","shell.execute_reply":"2025-10-08T18:51:15.708503Z"}},"outputs":[{"name":"stdout","text":"  Student_ID First_Name Last_Name                    Email  Gender  Age  \\\n0      S1000       Omar  Williams  student0@university.com  Female   22   \n1      S1001      Maria     Brown  student1@university.com    Male   18   \n2      S1002      Ahmed     Jones  student2@university.com    Male   24   \n3      S1003       Omar  Williams  student3@university.com  Female   24   \n4      S1004       John     Smith  student4@university.com  Female   23   \n\n    Department  Attendance (%)  Midterm_Score  Final_Score  ...  \\\n0  Mathematics           97.36          40.61        59.61  ...   \n1     Business           97.71          57.27        74.00  ...   \n2  Engineering           99.52          41.84        63.85  ...   \n3  Engineering           90.38          45.65        44.44  ...   \n4           CS           59.41          53.13        61.77  ...   \n\n   Projects_Score  Total_Score  Grade  Study_Hours_per_Week  \\\n0           62.84      59.8865      F                  10.3   \n1           98.23      81.9170      B                  27.1   \n2           91.22      67.7170      D                  12.4   \n3           55.48      51.6535      F                  25.5   \n4           87.43      71.4030      C                  13.3   \n\n   Extracurricular_Activities Internet_Access_at_Home  Parent_Education_Level  \\\n0                         Yes                      No                Master's   \n1                          No                      No             High School   \n2                         Yes                      No             High School   \n3                          No                     Yes             High School   \n4                         Yes                      No                Master's   \n\n  Family_Income_Level Stress_Level (1-10) Sleep_Hours_per_Night  \n0              Medium                   1                   5.9  \n1                 Low                   4                   4.3  \n2                 Low                   9                   6.1  \n3                 Low                   8                   4.9  \n4              Medium                   6                   4.5  \n\n[5 rows x 23 columns]\n\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 23 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Student_ID                  5000 non-null   object \n 1   First_Name                  5000 non-null   object \n 2   Last_Name                   5000 non-null   object \n 3   Email                       5000 non-null   object \n 4   Gender                      5000 non-null   object \n 5   Age                         5000 non-null   int64  \n 6   Department                  5000 non-null   object \n 7   Attendance (%)              5000 non-null   float64\n 8   Midterm_Score               5000 non-null   float64\n 9   Final_Score                 5000 non-null   float64\n 10  Assignments_Avg             5000 non-null   float64\n 11  Quizzes_Avg                 5000 non-null   float64\n 12  Participation_Score         5000 non-null   float64\n 13  Projects_Score              5000 non-null   float64\n 14  Total_Score                 5000 non-null   float64\n 15  Grade                       5000 non-null   object \n 16  Study_Hours_per_Week        5000 non-null   float64\n 17  Extracurricular_Activities  5000 non-null   object \n 18  Internet_Access_at_Home     5000 non-null   object \n 19  Parent_Education_Level      3975 non-null   object \n 20  Family_Income_Level         5000 non-null   object \n 21  Stress_Level (1-10)         5000 non-null   int64  \n 22  Sleep_Hours_per_Night       5000 non-null   float64\ndtypes: float64(10), int64(2), object(11)\nmemory usage: 898.6+ KB\nNone\n\n\n\n\n\nStudent_ID                       0\nFirst_Name                       0\nLast_Name                        0\nEmail                            0\nGender                           0\nAge                              0\nDepartment                       0\nAttendance (%)                   0\nMidterm_Score                    0\nFinal_Score                      0\nAssignments_Avg                  0\nQuizzes_Avg                      0\nParticipation_Score              0\nProjects_Score                   0\nTotal_Score                      0\nGrade                            0\nStudy_Hours_per_Week             0\nExtracurricular_Activities       0\nInternet_Access_at_Home          0\nParent_Education_Level        1025\nFamily_Income_Level              0\nStress_Level (1-10)              0\nSleep_Hours_per_Night            0\ndtype: int64\n\n\n\n\n\n\nModel:- \n LinearRegression()\n\nActual Data:- \n 1501    98.53\n2586    47.10\n2653    90.41\n1055    72.29\n705     52.79\n        ...  \n4711    97.92\n2313    45.47\n3214    68.45\n2732    45.26\n1926    67.20\nName: Final_Score, Length: 1000, dtype: float64\n\nPredicted Data:- \n [98.53 47.1  90.41 72.29 52.79 65.87 57.42 93.72 75.98 73.92]\n\nMSE:- \n 1.0218588621870898e-27\n\nR2 Score:- \n 1.0\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"Student Grade Prediction Using Polynomial Regression","metadata":{}},{"cell_type":"code","source":"#Step-1:- Import  Necessary Library\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n#Step-2:- Load and Explore the dataset\ndata=pd.read_csv(\"/kaggle/input/students-grading-dataset/Students Performance Dataset.csv\")\nprint(data.head())\nprint(\"\\n\\n\\n\\n\")\nprint(data.info())\nprint(\"\\n\\n\\n\\n\")\nprint(data.isnull().sum())\nprint(\"\\n\")\n\n#Step-3:- Clean and Preprocess data\ndata=data.drop(\"Parent_Education_Level\",axis=1)\n\n#Step-4:- Select which feature will be choosed as input feature and which one as output fetaure\nfeatures=[\"Midterm_Score\",\"Assignments_Avg\",\"Quizzes_Avg\",\"Participation_Score\",\"Projects_Score\",\"Total_Score\",\"Study_Hours_per_Week\"]\nx=data[features]\ny=data[\"Final_Score\"]\n\n#Step-5:- Split the data into training and testing sets\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\n#Step-6:- Apply Polynomial Features on x_train and x_test,\n#so that by applying these features on Linear Regression, \n#we could make it a Polynomial Regression\npoly=PolynomialFeatures(degree=2)\nx_poly_train=poly.fit_transform(x_train)\nx_poly_test=poly.transform(x_test)\n\n#Step-7:- Create and Train the Model\npoly_model=LinearRegression()\npoly_model.fit(x_poly_train,y_train)\nprint(\"\\nModel:- \\n\",poly_model)\n\n#Step-8:- Test the Model\ny_pred=poly_model.predict(x_poly_test)\nprint(\"\\nActual Data:- \\n\",y_test)\nprint(\"\\nPredicted Data:- \\n\",y_pred[:10])\n\n#Step-9:- Calculate Mean Square Error and R2 Score\nmse=mean_squared_error(y_pred,y_test)\nprint(\"\\nMSE:- \\n\",mse)\nr2_score=r2_score(y_pred,y_test)\nprint(\"\\nR2 Score:- \\n\",r2_score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T18:56:13.463952Z","iopub.execute_input":"2025-10-08T18:56:13.464273Z","iopub.status.idle":"2025-10-08T18:56:13.542765Z","shell.execute_reply.started":"2025-10-08T18:56:13.464248Z","shell.execute_reply":"2025-10-08T18:56:13.539595Z"}},"outputs":[{"name":"stdout","text":"  Student_ID First_Name Last_Name                    Email  Gender  Age  \\\n0      S1000       Omar  Williams  student0@university.com  Female   22   \n1      S1001      Maria     Brown  student1@university.com    Male   18   \n2      S1002      Ahmed     Jones  student2@university.com    Male   24   \n3      S1003       Omar  Williams  student3@university.com  Female   24   \n4      S1004       John     Smith  student4@university.com  Female   23   \n\n    Department  Attendance (%)  Midterm_Score  Final_Score  ...  \\\n0  Mathematics           97.36          40.61        59.61  ...   \n1     Business           97.71          57.27        74.00  ...   \n2  Engineering           99.52          41.84        63.85  ...   \n3  Engineering           90.38          45.65        44.44  ...   \n4           CS           59.41          53.13        61.77  ...   \n\n   Projects_Score  Total_Score  Grade  Study_Hours_per_Week  \\\n0           62.84      59.8865      F                  10.3   \n1           98.23      81.9170      B                  27.1   \n2           91.22      67.7170      D                  12.4   \n3           55.48      51.6535      F                  25.5   \n4           87.43      71.4030      C                  13.3   \n\n   Extracurricular_Activities Internet_Access_at_Home  Parent_Education_Level  \\\n0                         Yes                      No                Master's   \n1                          No                      No             High School   \n2                         Yes                      No             High School   \n3                          No                     Yes             High School   \n4                         Yes                      No                Master's   \n\n  Family_Income_Level Stress_Level (1-10) Sleep_Hours_per_Night  \n0              Medium                   1                   5.9  \n1                 Low                   4                   4.3  \n2                 Low                   9                   6.1  \n3                 Low                   8                   4.9  \n4              Medium                   6                   4.5  \n\n[5 rows x 23 columns]\n\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 23 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Student_ID                  5000 non-null   object \n 1   First_Name                  5000 non-null   object \n 2   Last_Name                   5000 non-null   object \n 3   Email                       5000 non-null   object \n 4   Gender                      5000 non-null   object \n 5   Age                         5000 non-null   int64  \n 6   Department                  5000 non-null   object \n 7   Attendance (%)              5000 non-null   float64\n 8   Midterm_Score               5000 non-null   float64\n 9   Final_Score                 5000 non-null   float64\n 10  Assignments_Avg             5000 non-null   float64\n 11  Quizzes_Avg                 5000 non-null   float64\n 12  Participation_Score         5000 non-null   float64\n 13  Projects_Score              5000 non-null   float64\n 14  Total_Score                 5000 non-null   float64\n 15  Grade                       5000 non-null   object \n 16  Study_Hours_per_Week        5000 non-null   float64\n 17  Extracurricular_Activities  5000 non-null   object \n 18  Internet_Access_at_Home     5000 non-null   object \n 19  Parent_Education_Level      3975 non-null   object \n 20  Family_Income_Level         5000 non-null   object \n 21  Stress_Level (1-10)         5000 non-null   int64  \n 22  Sleep_Hours_per_Night       5000 non-null   float64\ndtypes: float64(10), int64(2), object(11)\nmemory usage: 898.6+ KB\nNone\n\n\n\n\n\nStudent_ID                       0\nFirst_Name                       0\nLast_Name                        0\nEmail                            0\nGender                           0\nAge                              0\nDepartment                       0\nAttendance (%)                   0\nMidterm_Score                    0\nFinal_Score                      0\nAssignments_Avg                  0\nQuizzes_Avg                      0\nParticipation_Score              0\nProjects_Score                   0\nTotal_Score                      0\nGrade                            0\nStudy_Hours_per_Week             0\nExtracurricular_Activities       0\nInternet_Access_at_Home          0\nParent_Education_Level        1025\nFamily_Income_Level              0\nStress_Level (1-10)              0\nSleep_Hours_per_Night            0\ndtype: int64\n\n\n\nModel:- \n LinearRegression()\n\nActual Data:- \n 1501    98.53\n2586    47.10\n2653    90.41\n1055    72.29\n705     52.79\n        ...  \n4711    97.92\n2313    45.47\n3214    68.45\n2732    45.26\n1926    67.20\nName: Final_Score, Length: 1000, dtype: float64\n\nPredicted Data:- \n [98.53 47.1  90.41 72.29 52.79 65.87 57.42 93.72 75.98 73.92]\n\nMSE:- \n 5.7457925761946084e-24\n\nR2 Score:- \n 1.0\n","output_type":"stream"}],"execution_count":3},{"cell_type":"markdown","source":"Student Grade Prediction using Decision Tree Regressor","metadata":{}},{"cell_type":"code","source":"#Step-1:- Import Necessary Libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n#Step-2:- Load and Explore the dataset\ndata=pd.read_csv(\"/kaggle/input/students-grading-dataset/Students Performance Dataset.csv\")\nprint(data.head())\nprint(\"\\n\\n\\n\\n\")\nprint(data.info())\nprint(\"\\n\\n\\n\\n\")\nprint(data.isnull().sum())\n#print(\"\\n\\n\\n\\n\")\n\n#Step-3:- Clean and Preprocess data\ndata=data.drop(\"Parent_Education_Level\",axis=1)\n\n#Step-4:- Select which fetaures will be choosed as input feature and which one as output feature\nfeatures=[\"Midterm_Score\",\"Assignments_Avg\",\"Quizzes_Avg\",\"Participation_Score\",\"Projects_Score\",\"Total_Score\",\"Study_Hours_per_Week\"]\nx=data[features]\ny=data[\"Final_Score\"]\n\n#Step-5:- Split the data into Training and Testing sets\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\n#Step-6:- Create and Train the model\ndt_model=DecisionTreeRegressor(max_depth=3,random_state=42)\ndt_model.fit(x_train,y_train)\nprint(\"\\nModel:- \\n\",dt_model)\n\n#Step-7:- Test the model\ny_pred=model.predict(x_test)\nprint(\"\\nActual Data:- \\n\",y_test)\nprint(\"\\nPredicted Data:- \\n\",y_pred[:10])\n\n#Step-8:- Calculate Mean Square Error and R2 Score\nmse=mean_squared_error(y_pred,y_test)\nprint(\"\\nMSE:- \\n\",mse)\nr2_score=r2_score(y_pred,y_test)\nprint(\"\\nR2 Score:- \\n\",r2_score)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T18:57:15.973751Z","iopub.execute_input":"2025-10-08T18:57:15.974354Z","iopub.status.idle":"2025-10-08T18:57:16.201386Z","shell.execute_reply.started":"2025-10-08T18:57:15.974321Z","shell.execute_reply":"2025-10-08T18:57:16.200503Z"}},"outputs":[{"name":"stdout","text":"  Student_ID First_Name Last_Name                    Email  Gender  Age  \\\n0      S1000       Omar  Williams  student0@university.com  Female   22   \n1      S1001      Maria     Brown  student1@university.com    Male   18   \n2      S1002      Ahmed     Jones  student2@university.com    Male   24   \n3      S1003       Omar  Williams  student3@university.com  Female   24   \n4      S1004       John     Smith  student4@university.com  Female   23   \n\n    Department  Attendance (%)  Midterm_Score  Final_Score  ...  \\\n0  Mathematics           97.36          40.61        59.61  ...   \n1     Business           97.71          57.27        74.00  ...   \n2  Engineering           99.52          41.84        63.85  ...   \n3  Engineering           90.38          45.65        44.44  ...   \n4           CS           59.41          53.13        61.77  ...   \n\n   Projects_Score  Total_Score  Grade  Study_Hours_per_Week  \\\n0           62.84      59.8865      F                  10.3   \n1           98.23      81.9170      B                  27.1   \n2           91.22      67.7170      D                  12.4   \n3           55.48      51.6535      F                  25.5   \n4           87.43      71.4030      C                  13.3   \n\n   Extracurricular_Activities Internet_Access_at_Home  Parent_Education_Level  \\\n0                         Yes                      No                Master's   \n1                          No                      No             High School   \n2                         Yes                      No             High School   \n3                          No                     Yes             High School   \n4                         Yes                      No                Master's   \n\n  Family_Income_Level Stress_Level (1-10) Sleep_Hours_per_Night  \n0              Medium                   1                   5.9  \n1                 Low                   4                   4.3  \n2                 Low                   9                   6.1  \n3                 Low                   8                   4.9  \n4              Medium                   6                   4.5  \n\n[5 rows x 23 columns]\n\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 23 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Student_ID                  5000 non-null   object \n 1   First_Name                  5000 non-null   object \n 2   Last_Name                   5000 non-null   object \n 3   Email                       5000 non-null   object \n 4   Gender                      5000 non-null   object \n 5   Age                         5000 non-null   int64  \n 6   Department                  5000 non-null   object \n 7   Attendance (%)              5000 non-null   float64\n 8   Midterm_Score               5000 non-null   float64\n 9   Final_Score                 5000 non-null   float64\n 10  Assignments_Avg             5000 non-null   float64\n 11  Quizzes_Avg                 5000 non-null   float64\n 12  Participation_Score         5000 non-null   float64\n 13  Projects_Score              5000 non-null   float64\n 14  Total_Score                 5000 non-null   float64\n 15  Grade                       5000 non-null   object \n 16  Study_Hours_per_Week        5000 non-null   float64\n 17  Extracurricular_Activities  5000 non-null   object \n 18  Internet_Access_at_Home     5000 non-null   object \n 19  Parent_Education_Level      3975 non-null   object \n 20  Family_Income_Level         5000 non-null   object \n 21  Stress_Level (1-10)         5000 non-null   int64  \n 22  Sleep_Hours_per_Night       5000 non-null   float64\ndtypes: float64(10), int64(2), object(11)\nmemory usage: 898.6+ KB\nNone\n\n\n\n\n\nStudent_ID                       0\nFirst_Name                       0\nLast_Name                        0\nEmail                            0\nGender                           0\nAge                              0\nDepartment                       0\nAttendance (%)                   0\nMidterm_Score                    0\nFinal_Score                      0\nAssignments_Avg                  0\nQuizzes_Avg                      0\nParticipation_Score              0\nProjects_Score                   0\nTotal_Score                      0\nGrade                            0\nStudy_Hours_per_Week             0\nExtracurricular_Activities       0\nInternet_Access_at_Home          0\nParent_Education_Level        1025\nFamily_Income_Level              0\nStress_Level (1-10)              0\nSleep_Hours_per_Night            0\ndtype: int64\n\nModel:- \n DecisionTreeRegressor(max_depth=3, random_state=42)\n\nActual Data:- \n 1501    98.53\n2586    47.10\n2653    90.41\n1055    72.29\n705     52.79\n        ...  \n4711    97.92\n2313    45.47\n3214    68.45\n2732    45.26\n1926    67.20\nName: Final_Score, Length: 1000, dtype: float64\n\nPredicted Data:- \n [98.53 47.1  90.41 72.29 52.79 65.87 57.42 93.72 75.98 73.92]\n\nMSE:- \n 1.0218588621870898e-27\n\nR2 Score:- \n 1.0\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"Student Grade Prediction using KNN Regressor","metadata":{}},{"cell_type":"code","source":"#Step-1:- Import Necessary Library\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n\n#Step-2:- Load and Explore the dataset\ndata=pd.read_csv(\"/kaggle/input/students-grading-dataset/Students Performance Dataset.csv\")\nprint(data.head())\nprint(\"\\n\\n\\n\\n\")\nprint(data.info())\nprint(\"\\n\\n\\n\\n\")\nprint(data.isnull().sum())\n#print(\"\\n\\n\\n\\n\")\n\n#Step-3:- Clean and Preprocess data\ndata=data.drop(\"Parent_Education_Level\",axis=1)\n\n#Step-4:- Select which fetaures will be choosed as input feature and which one as output feature\nfeatures=[\"Midterm_Score\",\"Assignments_Avg\",\"Quizzes_Avg\",\"Participation_Score\",\"Projects_Score\",\"Total_Score\",\"Study_Hours_per_Week\"]\nx=data[features]\ny=data[\"Final_Score\"]\n\n#Step-5:- Split the data into Training and Testing sets\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\n#Step-6:- Create and Train the Model\nknn_model=KNeighborsRegressor(n_neighbors=5)\nknn_model.fit(x_train,y_train)\nprint(\"\\nModel:- \\n\",knn_model)\n\n#Step-7:- Test the model\ny_pred=knn_model.predict(x_test)\nprint(\"\\nActual data:- \\n\",y_test)\nprint(\"\\nPredicted Data:- \\n\",y_pred[:10])\n\n#Step-8:- Calculate Mean Square Error and R2 Score\nmse=mean_squared_error(y_test,y_pred)\nprint(\"\\nMSE:- \\n\",mse)\nr2_score=r2_score(y_test,y_pred)\nprint(\"\\nR2 Score:- \\n\",r2_score)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T18:59:06.868849Z","iopub.execute_input":"2025-10-08T18:59:06.869142Z","iopub.status.idle":"2025-10-08T18:59:06.954917Z","shell.execute_reply.started":"2025-10-08T18:59:06.869121Z","shell.execute_reply":"2025-10-08T18:59:06.954033Z"}},"outputs":[{"name":"stdout","text":"  Student_ID First_Name Last_Name                    Email  Gender  Age  \\\n0      S1000       Omar  Williams  student0@university.com  Female   22   \n1      S1001      Maria     Brown  student1@university.com    Male   18   \n2      S1002      Ahmed     Jones  student2@university.com    Male   24   \n3      S1003       Omar  Williams  student3@university.com  Female   24   \n4      S1004       John     Smith  student4@university.com  Female   23   \n\n    Department  Attendance (%)  Midterm_Score  Final_Score  ...  \\\n0  Mathematics           97.36          40.61        59.61  ...   \n1     Business           97.71          57.27        74.00  ...   \n2  Engineering           99.52          41.84        63.85  ...   \n3  Engineering           90.38          45.65        44.44  ...   \n4           CS           59.41          53.13        61.77  ...   \n\n   Projects_Score  Total_Score  Grade  Study_Hours_per_Week  \\\n0           62.84      59.8865      F                  10.3   \n1           98.23      81.9170      B                  27.1   \n2           91.22      67.7170      D                  12.4   \n3           55.48      51.6535      F                  25.5   \n4           87.43      71.4030      C                  13.3   \n\n   Extracurricular_Activities Internet_Access_at_Home  Parent_Education_Level  \\\n0                         Yes                      No                Master's   \n1                          No                      No             High School   \n2                         Yes                      No             High School   \n3                          No                     Yes             High School   \n4                         Yes                      No                Master's   \n\n  Family_Income_Level Stress_Level (1-10) Sleep_Hours_per_Night  \n0              Medium                   1                   5.9  \n1                 Low                   4                   4.3  \n2                 Low                   9                   6.1  \n3                 Low                   8                   4.9  \n4              Medium                   6                   4.5  \n\n[5 rows x 23 columns]\n\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 23 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Student_ID                  5000 non-null   object \n 1   First_Name                  5000 non-null   object \n 2   Last_Name                   5000 non-null   object \n 3   Email                       5000 non-null   object \n 4   Gender                      5000 non-null   object \n 5   Age                         5000 non-null   int64  \n 6   Department                  5000 non-null   object \n 7   Attendance (%)              5000 non-null   float64\n 8   Midterm_Score               5000 non-null   float64\n 9   Final_Score                 5000 non-null   float64\n 10  Assignments_Avg             5000 non-null   float64\n 11  Quizzes_Avg                 5000 non-null   float64\n 12  Participation_Score         5000 non-null   float64\n 13  Projects_Score              5000 non-null   float64\n 14  Total_Score                 5000 non-null   float64\n 15  Grade                       5000 non-null   object \n 16  Study_Hours_per_Week        5000 non-null   float64\n 17  Extracurricular_Activities  5000 non-null   object \n 18  Internet_Access_at_Home     5000 non-null   object \n 19  Parent_Education_Level      3975 non-null   object \n 20  Family_Income_Level         5000 non-null   object \n 21  Stress_Level (1-10)         5000 non-null   int64  \n 22  Sleep_Hours_per_Night       5000 non-null   float64\ndtypes: float64(10), int64(2), object(11)\nmemory usage: 898.6+ KB\nNone\n\n\n\n\n\nStudent_ID                       0\nFirst_Name                       0\nLast_Name                        0\nEmail                            0\nGender                           0\nAge                              0\nDepartment                       0\nAttendance (%)                   0\nMidterm_Score                    0\nFinal_Score                      0\nAssignments_Avg                  0\nQuizzes_Avg                      0\nParticipation_Score              0\nProjects_Score                   0\nTotal_Score                      0\nGrade                            0\nStudy_Hours_per_Week             0\nExtracurricular_Activities       0\nInternet_Access_at_Home          0\nParent_Education_Level        1025\nFamily_Income_Level              0\nStress_Level (1-10)              0\nSleep_Hours_per_Night            0\ndtype: int64\n\nModel:- \n KNeighborsRegressor()\n\nActual data:- \n 1501    98.53\n2586    47.10\n2653    90.41\n1055    72.29\n705     52.79\n        ...  \n4711    97.92\n2313    45.47\n3214    68.45\n2732    45.26\n1926    67.20\nName: Final_Score, Length: 1000, dtype: float64\n\nPredicted Data:- \n [80.648 69.736 85.47  61.55  65.996 74.08  69.312 93.464 70.642 75.536]\n\nMSE:- \n 173.82810566\n\nR2 Score:- \n 0.4329238825451942\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"Student Grade Prediction using Random Forest Regressor","metadata":{}},{"cell_type":"code","source":"#Step-1:- Import Necessary Libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n#Step-2:- Load and Explore the dataset\ndata=pd.read_csv(\"/kaggle/input/students-grading-dataset/Students Performance Dataset.csv\")\nprint(data.head())\nprint(\"\\n\\n\\n\\n\")\nprint(data.info())\nprint(\"\\n\\n\\n\\n\")\nprint(data.isnull().sum())\n#print(\"\\n\\n\\n\\n\")\n\n#Step-3:- Clean and Preprocess data\ndata=data.drop(\"Parent_Education_Level\",axis=1)\n\n#Step-4:- Select which fetaures will be choosed as input feature and which one as output feature\nfeatures=[\"Midterm_Score\",\"Assignments_Avg\",\"Quizzes_Avg\",\"Participation_Score\",\"Projects_Score\",\"Total_Score\",\"Study_Hours_per_Week\"]\nx=data[features]\ny=data[\"Final_Score\"]\n\n#Step-5:-Split the data into training and testing sets\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\n#Step-6:- Create and Train the model\nrf_model=RandomForestRegressor(n_estimators=3,random_state=42)\nrf_model.fit(x_train,y_train)\nprint(\"\\nModel:- \\n\",rf_model)\n\n#Step-7:- Test the model\ny_pred=rf_model.predict(x_test)\nprint(\"\\nActual data:- \\n\",y_test)\nprint(\"\\nPredicted Data:- \\n\",y_pred[:10])\n\n#Step-8:- Calculate Mean Square Error and R2 Score\nmse=mean_squared_error(y_test,y_pred)\nprint(\"\\nMSE:- \\n\",mse)\nr2_score=r2_score(y_test,y_pred)\nprint(\"\\nR2 Score:- \\n\",r2_score)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T19:01:18.08388Z","iopub.execute_input":"2025-10-08T19:01:18.084931Z","iopub.status.idle":"2025-10-08T19:01:18.225595Z","shell.execute_reply.started":"2025-10-08T19:01:18.084892Z","shell.execute_reply":"2025-10-08T19:01:18.224747Z"}},"outputs":[{"name":"stdout","text":"  Student_ID First_Name Last_Name                    Email  Gender  Age  \\\n0      S1000       Omar  Williams  student0@university.com  Female   22   \n1      S1001      Maria     Brown  student1@university.com    Male   18   \n2      S1002      Ahmed     Jones  student2@university.com    Male   24   \n3      S1003       Omar  Williams  student3@university.com  Female   24   \n4      S1004       John     Smith  student4@university.com  Female   23   \n\n    Department  Attendance (%)  Midterm_Score  Final_Score  ...  \\\n0  Mathematics           97.36          40.61        59.61  ...   \n1     Business           97.71          57.27        74.00  ...   \n2  Engineering           99.52          41.84        63.85  ...   \n3  Engineering           90.38          45.65        44.44  ...   \n4           CS           59.41          53.13        61.77  ...   \n\n   Projects_Score  Total_Score  Grade  Study_Hours_per_Week  \\\n0           62.84      59.8865      F                  10.3   \n1           98.23      81.9170      B                  27.1   \n2           91.22      67.7170      D                  12.4   \n3           55.48      51.6535      F                  25.5   \n4           87.43      71.4030      C                  13.3   \n\n   Extracurricular_Activities Internet_Access_at_Home  Parent_Education_Level  \\\n0                         Yes                      No                Master's   \n1                          No                      No             High School   \n2                         Yes                      No             High School   \n3                          No                     Yes             High School   \n4                         Yes                      No                Master's   \n\n  Family_Income_Level Stress_Level (1-10) Sleep_Hours_per_Night  \n0              Medium                   1                   5.9  \n1                 Low                   4                   4.3  \n2                 Low                   9                   6.1  \n3                 Low                   8                   4.9  \n4              Medium                   6                   4.5  \n\n[5 rows x 23 columns]\n\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 23 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Student_ID                  5000 non-null   object \n 1   First_Name                  5000 non-null   object \n 2   Last_Name                   5000 non-null   object \n 3   Email                       5000 non-null   object \n 4   Gender                      5000 non-null   object \n 5   Age                         5000 non-null   int64  \n 6   Department                  5000 non-null   object \n 7   Attendance (%)              5000 non-null   float64\n 8   Midterm_Score               5000 non-null   float64\n 9   Final_Score                 5000 non-null   float64\n 10  Assignments_Avg             5000 non-null   float64\n 11  Quizzes_Avg                 5000 non-null   float64\n 12  Participation_Score         5000 non-null   float64\n 13  Projects_Score              5000 non-null   float64\n 14  Total_Score                 5000 non-null   float64\n 15  Grade                       5000 non-null   object \n 16  Study_Hours_per_Week        5000 non-null   float64\n 17  Extracurricular_Activities  5000 non-null   object \n 18  Internet_Access_at_Home     5000 non-null   object \n 19  Parent_Education_Level      3975 non-null   object \n 20  Family_Income_Level         5000 non-null   object \n 21  Stress_Level (1-10)         5000 non-null   int64  \n 22  Sleep_Hours_per_Night       5000 non-null   float64\ndtypes: float64(10), int64(2), object(11)\nmemory usage: 898.6+ KB\nNone\n\n\n\n\n\nStudent_ID                       0\nFirst_Name                       0\nLast_Name                        0\nEmail                            0\nGender                           0\nAge                              0\nDepartment                       0\nAttendance (%)                   0\nMidterm_Score                    0\nFinal_Score                      0\nAssignments_Avg                  0\nQuizzes_Avg                      0\nParticipation_Score              0\nProjects_Score                   0\nTotal_Score                      0\nGrade                            0\nStudy_Hours_per_Week             0\nExtracurricular_Activities       0\nInternet_Access_at_Home          0\nParent_Education_Level        1025\nFamily_Income_Level              0\nStress_Level (1-10)              0\nSleep_Hours_per_Night            0\ndtype: int64\n\nModel:- \n RandomForestRegressor(n_estimators=3, random_state=42)\n\nActual data:- \n 1501    98.53\n2586    47.10\n2653    90.41\n1055    72.29\n705     52.79\n        ...  \n4711    97.92\n2313    45.47\n3214    68.45\n2732    45.26\n1926    67.20\nName: Final_Score, Length: 1000, dtype: float64\n\nPredicted Data:- \n [91.08333333 52.19       82.50333333 64.01       54.81       67.99\n 76.82666667 96.15666667 83.58       68.74666667]\n\nMSE:- \n 55.330134188888884\n\nR2 Score:- \n 0.8194975573428882\n","output_type":"stream"}],"execution_count":7},{"cell_type":"markdown","source":"Student Grade Prediction using SVM Regressor","metadata":{}},{"cell_type":"code","source":"#Step-1:- import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n#Step-2:- Load and Explore the dataset\ndata=pd.read_csv(\"/kaggle/input/students-grading-dataset/Students Performance Dataset.csv\")\nprint(data.head())\nprint(\"\\n\\n\\n\\n\")\nprint(data.info())\nprint(\"\\n\\n\\n\\n\")\nprint(data.isnull().sum())\n#print(\"\\n\\n\\n\\n\")\n\n#Step-3:- Clean and Preprocess data\ndata=data.drop(\"Parent_Education_Level\",axis=1)\n\n#Step-4:- Select which fetaures will be choosed as input feature and which one as output feature\nfeatures=[\"Midterm_Score\",\"Assignments_Avg\",\"Quizzes_Avg\",\"Participation_Score\",\"Projects_Score\",\"Total_Score\",\"Study_Hours_per_Week\"]\nx=data[features]\ny=data[\"Final_Score\"]\n\n#Step-5:- Split the data into training and testing sets\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\n#Step-6:- Feature Scaling(important for svm)\nscaler_x=StandardScaler()\nscaler_y=StandardScaler()\nx_train_scaled=scaler_x.fit_transform(x_train)\nx_test_scaled=scaler_x.transform(x_test)\n\ny_train_scaled=scaler_y.fit_transform(y_train.values.reshape(-1,1)).ravel()\n\n#Step-7:- Create and train the model\nsvm_model=SVR(kernel=\"rbf\",C=100,gamma=0.1,epsilon=0.1)\nsvm_model.fit(x_train_scaled,y_train_scaled)\nprint(\"\\nModel:- \\n\",svm_model)\n\n#Step-8:- Test the model\ny_pred_scaled=svm_model.predict(x_test_scaled)\ny_pred=scaler_y.inverse_transform(y_pred_scaled.reshape(-1,1)).ravel()\nprint(\"\\nActual data:- \\n\",y_test)\nprint(\"\\nPredicted Data:- \\n\",y_pred[:10])\n\n#Step-9:- Calculate Mean Square Error and R2 Score\nmse=mean_squared_error(y_test,y_pred)\nprint(\"\\nMSE:- \\n\",mse)\nr2_score=r2_score(y_test,y_pred)\nprint(\"\\nR2 Score:- \\n\",r2_score)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T19:03:09.398677Z","iopub.execute_input":"2025-10-08T19:03:09.39903Z","iopub.status.idle":"2025-10-08T19:03:09.692958Z","shell.execute_reply.started":"2025-10-08T19:03:09.399002Z","shell.execute_reply":"2025-10-08T19:03:09.691871Z"}},"outputs":[{"name":"stdout","text":"  Student_ID First_Name Last_Name                    Email  Gender  Age  \\\n0      S1000       Omar  Williams  student0@university.com  Female   22   \n1      S1001      Maria     Brown  student1@university.com    Male   18   \n2      S1002      Ahmed     Jones  student2@university.com    Male   24   \n3      S1003       Omar  Williams  student3@university.com  Female   24   \n4      S1004       John     Smith  student4@university.com  Female   23   \n\n    Department  Attendance (%)  Midterm_Score  Final_Score  ...  \\\n0  Mathematics           97.36          40.61        59.61  ...   \n1     Business           97.71          57.27        74.00  ...   \n2  Engineering           99.52          41.84        63.85  ...   \n3  Engineering           90.38          45.65        44.44  ...   \n4           CS           59.41          53.13        61.77  ...   \n\n   Projects_Score  Total_Score  Grade  Study_Hours_per_Week  \\\n0           62.84      59.8865      F                  10.3   \n1           98.23      81.9170      B                  27.1   \n2           91.22      67.7170      D                  12.4   \n3           55.48      51.6535      F                  25.5   \n4           87.43      71.4030      C                  13.3   \n\n   Extracurricular_Activities Internet_Access_at_Home  Parent_Education_Level  \\\n0                         Yes                      No                Master's   \n1                          No                      No             High School   \n2                         Yes                      No             High School   \n3                          No                     Yes             High School   \n4                         Yes                      No                Master's   \n\n  Family_Income_Level Stress_Level (1-10) Sleep_Hours_per_Night  \n0              Medium                   1                   5.9  \n1                 Low                   4                   4.3  \n2                 Low                   9                   6.1  \n3                 Low                   8                   4.9  \n4              Medium                   6                   4.5  \n\n[5 rows x 23 columns]\n\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 23 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Student_ID                  5000 non-null   object \n 1   First_Name                  5000 non-null   object \n 2   Last_Name                   5000 non-null   object \n 3   Email                       5000 non-null   object \n 4   Gender                      5000 non-null   object \n 5   Age                         5000 non-null   int64  \n 6   Department                  5000 non-null   object \n 7   Attendance (%)              5000 non-null   float64\n 8   Midterm_Score               5000 non-null   float64\n 9   Final_Score                 5000 non-null   float64\n 10  Assignments_Avg             5000 non-null   float64\n 11  Quizzes_Avg                 5000 non-null   float64\n 12  Participation_Score         5000 non-null   float64\n 13  Projects_Score              5000 non-null   float64\n 14  Total_Score                 5000 non-null   float64\n 15  Grade                       5000 non-null   object \n 16  Study_Hours_per_Week        5000 non-null   float64\n 17  Extracurricular_Activities  5000 non-null   object \n 18  Internet_Access_at_Home     5000 non-null   object \n 19  Parent_Education_Level      3975 non-null   object \n 20  Family_Income_Level         5000 non-null   object \n 21  Stress_Level (1-10)         5000 non-null   int64  \n 22  Sleep_Hours_per_Night       5000 non-null   float64\ndtypes: float64(10), int64(2), object(11)\nmemory usage: 898.6+ KB\nNone\n\n\n\n\n\nStudent_ID                       0\nFirst_Name                       0\nLast_Name                        0\nEmail                            0\nGender                           0\nAge                              0\nDepartment                       0\nAttendance (%)                   0\nMidterm_Score                    0\nFinal_Score                      0\nAssignments_Avg                  0\nQuizzes_Avg                      0\nParticipation_Score              0\nProjects_Score                   0\nTotal_Score                      0\nGrade                            0\nStudy_Hours_per_Week             0\nExtracurricular_Activities       0\nInternet_Access_at_Home          0\nParent_Education_Level        1025\nFamily_Income_Level              0\nStress_Level (1-10)              0\nSleep_Hours_per_Night            0\ndtype: int64\n\nModel:- \n SVR(C=100, gamma=0.1)\n\nActual data:- \n 1501    98.53\n2586    47.10\n2653    90.41\n1055    72.29\n705     52.79\n        ...  \n4711    97.92\n2313    45.47\n3214    68.45\n2732    45.26\n1926    67.20\nName: Final_Score, Length: 1000, dtype: float64\n\nPredicted Data:- \n [97.48085633 46.96018168 90.44476739 72.57316211 55.11338019 65.90100569\n 57.33137072 95.53974994 76.19488852 74.27230239]\n\nMSE:- \n 0.9958238993625402\n\nR2 Score:- \n 0.9967513426647832\n","output_type":"stream"}],"execution_count":8},{"cell_type":"markdown","source":"Student Grade Prediction using Gradient Boosting","metadata":{}},{"cell_type":"code","source":"#Step-1:- Import Necessary Library\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n#Step-2:- Load and Explore the dataset\ndata=pd.read_csv(\"/kaggle/input/students-grading-dataset/Students Performance Dataset.csv\")\nprint(data.head())\nprint(\"\\n\\n\\n\\n\")\nprint(data.info())\nprint(\"\\n\\n\\n\\n\")\nprint(data.isnull().sum())\n#print(\"\\n\\n\\n\\n\")\n\n#Step-3:- Clean and Preprocess data\ndata=data.drop(\"Parent_Education_Level\",axis=1)\n\n#Step-4:- Select which fetaures will be choosed as input feature and which one as output feature\nfeatures=[\"Midterm_Score\",\"Assignments_Avg\",\"Quizzes_Avg\",\"Participation_Score\",\"Projects_Score\",\"Total_Score\",\"Study_Hours_per_Week\"]\nx=data[features]\ny=data[\"Final_Score\"]\n\n#Step-5:- Split the data into training and testing sets\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\n#Step-6:- Create and Train the model\ngb_model=GradientBoostingRegressor()\ngb_model.fit(x_train,y_train)\nprint(\"\\nModel:- \\n\",gb_model)\n\n#Step-8:- Test the model\ny_pred=gb_model.predict(x_test)\nprint(\"\\nActual data:- \\n\",y_test)\nprint(\"\\nPredicted Data:- \\n\",y_pred[:10])\n\n#Step-9:- Calculate Mean Square Error and R2 Score\nmse=mean_squared_error(y_test,y_pred)\nprint(\"\\nMSE:- \\n\",mse)\nr2_score=r2_score(y_test,y_pred)\nprint(\"\\nR2 Score:- \\n\",r2_score)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T19:06:04.049028Z","iopub.execute_input":"2025-10-08T19:06:04.049348Z","iopub.status.idle":"2025-10-08T19:06:05.051925Z","shell.execute_reply.started":"2025-10-08T19:06:04.049326Z","shell.execute_reply":"2025-10-08T19:06:05.05109Z"}},"outputs":[{"name":"stdout","text":"  Student_ID First_Name Last_Name                    Email  Gender  Age  \\\n0      S1000       Omar  Williams  student0@university.com  Female   22   \n1      S1001      Maria     Brown  student1@university.com    Male   18   \n2      S1002      Ahmed     Jones  student2@university.com    Male   24   \n3      S1003       Omar  Williams  student3@university.com  Female   24   \n4      S1004       John     Smith  student4@university.com  Female   23   \n\n    Department  Attendance (%)  Midterm_Score  Final_Score  ...  \\\n0  Mathematics           97.36          40.61        59.61  ...   \n1     Business           97.71          57.27        74.00  ...   \n2  Engineering           99.52          41.84        63.85  ...   \n3  Engineering           90.38          45.65        44.44  ...   \n4           CS           59.41          53.13        61.77  ...   \n\n   Projects_Score  Total_Score  Grade  Study_Hours_per_Week  \\\n0           62.84      59.8865      F                  10.3   \n1           98.23      81.9170      B                  27.1   \n2           91.22      67.7170      D                  12.4   \n3           55.48      51.6535      F                  25.5   \n4           87.43      71.4030      C                  13.3   \n\n   Extracurricular_Activities Internet_Access_at_Home  Parent_Education_Level  \\\n0                         Yes                      No                Master's   \n1                          No                      No             High School   \n2                         Yes                      No             High School   \n3                          No                     Yes             High School   \n4                         Yes                      No                Master's   \n\n  Family_Income_Level Stress_Level (1-10) Sleep_Hours_per_Night  \n0              Medium                   1                   5.9  \n1                 Low                   4                   4.3  \n2                 Low                   9                   6.1  \n3                 Low                   8                   4.9  \n4              Medium                   6                   4.5  \n\n[5 rows x 23 columns]\n\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 23 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Student_ID                  5000 non-null   object \n 1   First_Name                  5000 non-null   object \n 2   Last_Name                   5000 non-null   object \n 3   Email                       5000 non-null   object \n 4   Gender                      5000 non-null   object \n 5   Age                         5000 non-null   int64  \n 6   Department                  5000 non-null   object \n 7   Attendance (%)              5000 non-null   float64\n 8   Midterm_Score               5000 non-null   float64\n 9   Final_Score                 5000 non-null   float64\n 10  Assignments_Avg             5000 non-null   float64\n 11  Quizzes_Avg                 5000 non-null   float64\n 12  Participation_Score         5000 non-null   float64\n 13  Projects_Score              5000 non-null   float64\n 14  Total_Score                 5000 non-null   float64\n 15  Grade                       5000 non-null   object \n 16  Study_Hours_per_Week        5000 non-null   float64\n 17  Extracurricular_Activities  5000 non-null   object \n 18  Internet_Access_at_Home     5000 non-null   object \n 19  Parent_Education_Level      3975 non-null   object \n 20  Family_Income_Level         5000 non-null   object \n 21  Stress_Level (1-10)         5000 non-null   int64  \n 22  Sleep_Hours_per_Night       5000 non-null   float64\ndtypes: float64(10), int64(2), object(11)\nmemory usage: 898.6+ KB\nNone\n\n\n\n\n\nStudent_ID                       0\nFirst_Name                       0\nLast_Name                        0\nEmail                            0\nGender                           0\nAge                              0\nDepartment                       0\nAttendance (%)                   0\nMidterm_Score                    0\nFinal_Score                      0\nAssignments_Avg                  0\nQuizzes_Avg                      0\nParticipation_Score              0\nProjects_Score                   0\nTotal_Score                      0\nGrade                            0\nStudy_Hours_per_Week             0\nExtracurricular_Activities       0\nInternet_Access_at_Home          0\nParent_Education_Level        1025\nFamily_Income_Level              0\nStress_Level (1-10)              0\nSleep_Hours_per_Night            0\ndtype: int64\n\nModel:- \n GradientBoostingRegressor()\n\nActual data:- \n 1501    98.53\n2586    47.10\n2653    90.41\n1055    72.29\n705     52.79\n        ...  \n4711    97.92\n2313    45.47\n3214    68.45\n2732    45.26\n1926    67.20\nName: Final_Score, Length: 1000, dtype: float64\n\nPredicted Data:- \n [89.26759822 55.08237627 85.10088024 75.28975062 51.66304272 68.41098607\n 66.36339281 89.54700611 83.81593153 72.52906296]\n\nMSE:- \n 30.67849098937939\n\nR2 Score:- \n 0.8999181433084398\n","output_type":"stream"}],"execution_count":11}]}