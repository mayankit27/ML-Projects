{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5680,"sourceType":"datasetVersion","datasetId":3537}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/mayank123nayak/regression-boston-house-prediction?scriptVersionId=266312041\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"import necessary packages","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error,r2_score,accuracy_score\n#from sklearn.datasets import load_boston","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T05:53:16.55644Z","iopub.execute_input":"2025-08-26T05:53:16.556765Z","iopub.status.idle":"2025-08-26T05:53:16.561449Z","shell.execute_reply.started":"2025-08-26T05:53:16.556743Z","shell.execute_reply":"2025-08-26T05:53:16.560591Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"load data","metadata":{}},{"cell_type":"code","source":"data=pd.read_csv(\"/kaggle/input/boston-housing-dataset/HousingData.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T05:53:16.562791Z","iopub.execute_input":"2025-08-26T05:53:16.563028Z","iopub.status.idle":"2025-08-26T05:53:16.590935Z","shell.execute_reply.started":"2025-08-26T05:53:16.563011Z","shell.execute_reply":"2025-08-26T05:53:16.590132Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"data exploration","metadata":{}},{"cell_type":"code","source":"print(data.info())\nprint(data.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T05:53:16.59425Z","iopub.execute_input":"2025-08-26T05:53:16.594526Z","iopub.status.idle":"2025-08-26T05:53:16.612379Z","shell.execute_reply.started":"2025-08-26T05:53:16.594505Z","shell.execute_reply":"2025-08-26T05:53:16.6115Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"clean and preprocess data","metadata":{}},{"cell_type":"code","source":"print(data.isnull().sum())\n\ndata[\"CRIM\"]=data[\"CRIM\"].fillna(data[\"CRIM\"].median())\ndata[\"ZN\"]=data[\"ZN\"].fillna(data[\"ZN\"].median())\ndata[\"INDUS\"]=data[\"INDUS\"].fillna(data[\"INDUS\"].median())\ndata[\"AGE\"]=data[\"AGE\"].fillna(data[\"AGE\"].median())\ndata[\"LSTAT\"]=data[\"LSTAT\"].fillna(data[\"LSTAT\"].median())\n\ndata[\"CHAS\"]=data[\"CHAS\"].fillna(data[\"CHAS\"].mode()[0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T10:29:20.561233Z","iopub.execute_input":"2025-10-07T10:29:20.562301Z","iopub.status.idle":"2025-10-07T10:29:20.57637Z","shell.execute_reply.started":"2025-10-07T10:29:20.562262Z","shell.execute_reply":"2025-10-07T10:29:20.575297Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"define features(x) and targets(y)","metadata":{}},{"cell_type":"code","source":"x=data.drop(\"MEDV\",axis=1)\ny=data[\"MEDV\"]\nprint(x)\nprint(y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T05:53:16.644629Z","iopub.execute_input":"2025-08-26T05:53:16.644923Z","iopub.status.idle":"2025-08-26T05:53:16.673168Z","shell.execute_reply.started":"2025-08-26T05:53:16.644903Z","shell.execute_reply":"2025-08-26T05:53:16.672451Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"split data into training and testing data","metadata":{}},{"cell_type":"code","source":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T05:53:16.674028Z","iopub.execute_input":"2025-08-26T05:53:16.674237Z","iopub.status.idle":"2025-08-26T05:53:16.681723Z","shell.execute_reply.started":"2025-08-26T05:53:16.67422Z","shell.execute_reply":"2025-08-26T05:53:16.680841Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"choose a model and train the model","metadata":{}},{"cell_type":"code","source":"model=LinearRegression()\nmodel.fit(x_train,y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T05:53:16.68293Z","iopub.execute_input":"2025-08-26T05:53:16.683245Z","iopub.status.idle":"2025-08-26T05:53:16.705917Z","shell.execute_reply.started":"2025-08-26T05:53:16.68322Z","shell.execute_reply":"2025-08-26T05:53:16.705083Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"predict the test data ","metadata":{}},{"cell_type":"code","source":"y_pred=model.predict(x_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T05:53:16.707955Z","iopub.execute_input":"2025-08-26T05:53:16.708585Z","iopub.status.idle":"2025-08-26T05:53:16.719985Z","shell.execute_reply.started":"2025-08-26T05:53:16.708554Z","shell.execute_reply":"2025-08-26T05:53:16.718782Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"evaluate the data to know the mean squared error and r2 score","metadata":{}},{"cell_type":"markdown","source":"we are not calculating accuracy,just like other algorithm because accuracy is calculated when we need to find category and mse and r2 is used when we need to find how well we predicted actual result which can't be happen through accuracy \nnote:\naccuracy--> classification\nmse,r2_score--> regression","metadata":{}},{"cell_type":"code","source":"mse=mean_squared_error(y_test,y_pred)\nr2=r2_score(y_test,y_pred)\nprint(mse)\nprint(r2)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T05:53:16.720872Z","iopub.execute_input":"2025-08-26T05:53:16.721122Z","iopub.status.idle":"2025-08-26T05:53:16.737429Z","shell.execute_reply.started":"2025-08-26T05:53:16.721103Z","shell.execute_reply":"2025-08-26T05:53:16.736345Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Boston House Prediction using Linear Regression","metadata":{}},{"cell_type":"code","source":"#Step-1:- Import Necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error,r2_score,accuracy_score\n\n#Step-2:- Load and Explore the dataset\ndata=pd.read_csv(\"/kaggle/input/boston-housing-dataset/HousingData.csv\")\nprint(data.head())\nprint(\"\\n\\n\\n\\n\")\nprint(data.info())\nprint(\"\\n\\n\\n\\n\")\nprint(data.isnull().sum())\nprint(\"\\n\\n\\n\\n\")\n\n#Step-3:- Clean and Preprocess the data \n#Filling all the null values in the dataset by its column median value\n\n#print(data.isnull().sum())\n#data[\"CRIM\"]=data[\"CRIM\"].fillna(data[\"CRIM\"].median())\n#data[\"ZN\"]=data[\"ZN\"].fillna(data[\"ZN\"].median())\n#data[\"INDUS\"]=data[\"INDUS\"].fillna(data[\"INDUS\"].median())\n#data[\"AGE\"]=data[\"AGE\"].fillna(data[\"AGE\"].median())\n#data[\"LSTAT\"]=data[\"LSTAT\"].fillna(data[\"LSTAT\"].median())\n#data[\"CHAS\"]=data[\"CHAS\"].fillna(data[\"CHAS\"].mode()[0])\n\ndata=data.fillna(data.median())\nprint(data.isnull().sum())\nprint(\"\\n\\n\\n\\n\")\n\n#Step-4:- Select which feature will be selected as input fetaure and which one as output \nx=data.drop(\"MEDV\",axis=1)\ny=data[\"MEDV\"]\n\n#Step-5:- Split the data into training and testing sets\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\n#Step-6:- Create and Train the model\nmodel=LinearRegression()\nmodel.fit(x_train,y_train)\nprint(\"\\nModel:- \\n\",model)\n\n#Step-7:- Test the model\ny_pred=model.predict(x_test)\nprint(\"\\nActual Data:- \\n\",y_test)\nprint(\"\\nPredicted Data:- \\n\",y_pred)\n\n#Step-8:- Calculate mean squared error and r2 score and accuracy score\nmse=mean_squared_error(y_pred,y_test)\nprint(\"\\nMSE:- \\n\",mse)\nr2_score=r2_score(y_pred,y_test)\nprint(\"\\nR2 Score:- \\n\",r2_score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T11:35:48.905489Z","iopub.execute_input":"2025-10-07T11:35:48.905773Z","iopub.status.idle":"2025-10-07T11:35:48.944437Z","shell.execute_reply.started":"2025-10-07T11:35:48.905744Z","shell.execute_reply":"2025-10-07T11:35:48.943528Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Code for Boston Housing Price Prediction Project using Decision Tree Regressor","metadata":{}},{"cell_type":"code","source":"#Step-1:- Import Necessary Libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n#Step-2:- Load and Explore the dataset\ndata=pd.read_csv(\"/kaggle/input/boston-housing-dataset/HousingData.csv\")\nprint(data.head())\nprint(\"\\n\\n\\n\\n\")\nprint(data.info())\nprint(\"\\n\\n\\n\\n\")\nprint(data.isnull().sum())\nprint(\"\\n\\n\\n\\n\")\n\n#Step-3:- Clean and Preprocess the data\ndata=data.fillna(data.median())\n\n#Step-4:- Split the data into training and testing sets\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\n#Step-5:- Create and Train the model\ndt_model=DecisionTreeRegressor(max_depth=4,random_state=42)\ndt_model.fit(x_train,y_train)\nprint(\"\\nModel:- \\n\",dt_model)\n\n\n#Step-6:- Test the model \ny_pred=dt_model.predict(x_test)\nprint(\"\\nPredicted data:- \\n\",y_pred)\nprint(\"\\nActual data:- \\n\",y_test)\n\n#Step-7:- Calculate Mean Squared Error and R2 Score\nmse=mean_squared_error(y_pred,y_test)\nprint(\"\\nMSE:- \\n\",mse)\nr2_score=r2_score(y_pred,y_test)\nprint(\"\\nR2 Score:- \\n\",r2_score)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T11:44:24.989513Z","iopub.execute_input":"2025-10-07T11:44:24.989972Z","iopub.status.idle":"2025-10-07T11:44:25.044536Z","shell.execute_reply.started":"2025-10-07T11:44:24.989791Z","shell.execute_reply":"2025-10-07T11:44:25.042954Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Boston Housing Price Prediction using KNN Regressor","metadata":{}},{"cell_type":"code","source":"#Step-1:- Import Necessary Libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n#Step-2:- Load and Explore the dataset\ndata=pd.read_csv(\"/kaggle/input/boston-housing-dataset/HousingData.csv\")\nprint(data.head())\nprint(\"\\n\\n\\n\\n\")\nprint(data.info())\nprint(\"\\n\\n\\n\\n\")\nprint(data.isnull().sum())\nprint(\"\\n\\n\\n\\n\")\n\n#Step-3:- Clean and preprocess the data\ndata=data.fillna(data.median())\n\n#Step-4:- Split the data into training and testing sets\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\n#Step-5:- Feature Scaling(important for KNN)\nscaler=StandardScaler()\nx_train_scaled=scaler.fit_transform(x_train)\nx_test_scaled=scaler.transform(x_test)\n\n#Step-6:- Create and train the model\nknn_model=KNeighborsRegressor(n_neighbors=5)\nknn_model.fit(x_train_scaled,y_train)\nprint(\"\\nModel:- \\n\",knn_model)\n\n#Step-7:- Test the Model\ny_pred=knn_model.predict(x_test_scaled)\nprint(\"\\nActual Data:- \\n\",y_test)\nprint(\"\\nPredicted Data:- \\n\",y_pred)\n\n#Step-8:- Calcualte Mean Squared Error and R2 Score\nmse=mean_squared_error(y_pred,y_test)\nprint(\"\\nMSE:- \\n\",mse)\nr2_score=r2_score(y_pred,y_test)\nprint(\"\\nR2 Score:- \\n\",r2_score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T12:47:24.014546Z","iopub.execute_input":"2025-10-07T12:47:24.014887Z","iopub.status.idle":"2025-10-07T12:47:24.062294Z","shell.execute_reply.started":"2025-10-07T12:47:24.014854Z","shell.execute_reply":"2025-10-07T12:47:24.059829Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Boston Housing Price Prediction using Random Forest Regressor","metadata":{}},{"cell_type":"code","source":"#Step-1:- Import Necessary Libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n#Step-2:- Load and Explore the dataset\ndata=pd.read_csv(\"/kaggle/input/boston-housing-dataset/HousingData.csv\")\nprint(data.head())\nprint(\"\\n\\n\\n\\n\")\nprint(data.info())\nprint(\"\\n\\n\\n\\n\")\nprint(data.isnull().sum())\nprint(\"\\n\\n\\n\\n\")\n\n#Step-3:- Clean and preprocess the data\ndata=data.fillna(data.median())\n\n#Step-4:- Split data into training and testing sets\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\n#Step-5:- Create and Train the model\nrf_model=RandomForestRegressor(n_estimators=100,random_state=42)\nrf_model.fit(x_train,y_train)\nprint(\"\\nModel:- \\n\",rf_model)\n\n#Step-6:-Test the model\ny_pred=rf_model.predict(x_test)\nprint(\"\\nActual Data:- \\n\",y_test)\nprint(\"\\nPredicted Data:- \\n\",y_pred)\n\n#Step-7:- Calcualte Mean Squared Error and R2 Score\nmse=mean_squared_error(y_pred,y_test)\nprint(\"\\nMSE:- \\n\",mse)\nr2_score=r2_score(y_pred,y_test)\nprint(\"\\nR2 Score:- \\n\",r2_score)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T13:21:13.436477Z","iopub.execute_input":"2025-10-07T13:21:13.437931Z","iopub.status.idle":"2025-10-07T13:21:13.904258Z","shell.execute_reply.started":"2025-10-07T13:21:13.437891Z","shell.execute_reply":"2025-10-07T13:21:13.903219Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Boston Housing Price Prediction using SVM Regressor","metadata":{}},{"cell_type":"code","source":"#Step-1:- Import Necessary Libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n#Step-2:- Load and Explore the dataset\ndata=pd.read_csv(\"/kaggle/input/boston-housing-dataset/HousingData.csv\")\nprint(data.head())\nprint(\"\\n\\n\\n\\n\")\nprint(data.info())\nprint(\"\\n\\n\\n\\n\")\nprint(data.isnull().sum())\nprint(\"\\n\\n\\n\\n\")\n\n#Step-3:- Clean and preprocess the data\ndata=data.fillna(data.median())\n\n#Step-4:- Split the data into training and tetsing sets\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\n#Step-5:-Feature Scaling(important for SVM Regressor)\nscaler_x=StandardScaler()\nscaler_y=StandardScaler()\n\nx_train_scaled=scaler_x.fit_transform(x_train)\nx_test_scaled=scaler_x.transform(x_test)\n\ny_train_scaled=scaler_y.fit_transform(y_train.values.reshape(-1,1)).ravel()\n\n#Step-6:- Create and Train the model\nsvm_model=SVR(kernel=\"rbf\",C=100,gamma=0.1,epsilon=0.1)\nsvm_model.fit(x_train_scaled,y_train_scaled)\nprint(\"\\nModel:- \\n\",svm_model)\n\n#Step-7:- Test the model\ny_pred_scaled=svm_model.predict(x_test_scaled)\ny_pred=scaler_y.inverse_transform(y_pred_scaled.reshape(-1,1)).ravel()\nprint(\"\\nActual Data:- \\n\",y_test)\nprint(\"\\nPredicted Data:- \\n\",y_pred)\n\n#Step-8:- Calcualte Mean Squared Error and R2 Score\nmse=mean_squared_error(y_pred,y_test)\nprint(\"\\nMSE:- \\n\",mse)\nr2_score=r2_score(y_pred,y_test)\nprint(\"\\nR2 Score:- \\n\",r2_score)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T14:19:02.423405Z","iopub.execute_input":"2025-10-07T14:19:02.423667Z","iopub.status.idle":"2025-10-07T14:19:02.562723Z","shell.execute_reply.started":"2025-10-07T14:19:02.42365Z","shell.execute_reply":"2025-10-07T14:19:02.561163Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Boston Housing Price Prediction using Gradient Boosting Regressor","metadata":{}},{"cell_type":"code","source":"#Step-1:- Import Necessary Library\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n#Step-2:- Load and Explore the dataset\ndata=pd.read_csv(\"/kaggle/input/boston-housing-dataset/HousingData.csv\")\nprint(data.head())\nprint(\"\\n\\n\\n\\n\")\nprint(data.info())\nprint(\"\\n\\n\\n\\n\")\nprint(data.isnull().sum())\nprint(\"\\n\\n\\n\\n\")\n\n#Step-3:- Clean and preprocess the data\ndata=data.fillna(data.median())\n\n#Step-4:- Split the data into training and testing sets \nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\n#Step-5:- Create and Train the model\ngb_model=GradientBoostingRegressor(n_estimators=200,learning_rate=0.1,max_depth=3,random_state=42)\ngb_model.fit(x_train,y_train)\nprint(\"\\nModel:- \\n\",gb_model)\n\n#Step-6:-Test the model\ny_pred=gb_model.predict(x_test)\nprint(\"\\nActual Data:- \\n\",y_test)\nprint(\"\\nPredicted Data:- \\n\",y_pred)\n\n#Step-8:- Calcualte Mean Squared Error and R2 Score\nmse=mean_squared_error(y_pred,y_test)\nprint(\"\\nMSE:- \\n\",mse)\nr2_score=r2_score(y_pred,y_test)\nprint(\"\\nR2 Score:- \\n\",r2_score)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T14:58:22.317363Z","iopub.execute_input":"2025-10-07T14:58:22.317623Z","iopub.status.idle":"2025-10-07T14:58:22.616232Z","shell.execute_reply.started":"2025-10-07T14:58:22.317604Z","shell.execute_reply":"2025-10-07T14:58:22.614943Z"}},"outputs":[],"execution_count":null}]}